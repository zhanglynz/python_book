[
  {
    "objectID": "summaryBook.html",
    "href": "summaryBook.html",
    "title": "1  Summary of PY4E",
    "section": "",
    "text": "I have studied Python for Everybody: Exploring Data Using Python 3 by Charles R. Severance, and here I write down a Summary.\n\nCh 1 Introduction to Computer and computer languages\n\ncomputer: Input/output devices; CPU; main memory (RAM); secondary memory; network\nmachine language; low level language; high level language\n“The Python interpreter is written in a high-level language called ‘C’.”\n“Python scripts have names end with .py”\nImportant concepts: input and output; sequential execution, conditional execution, and repeated execution; reuse.\nThree general types of errors: syntax errors, logic errors, and semantic errors (the code runs without producting an error message, but it does not do the “right” thing.)\n\nCh 2 Variables, expressions and statements\n\nPython is case sensitive, that is, A is different from a\nVariable names can contain both letters and numbers, but they cannot start with a number\n“Variable names can start with an underscore character, but we generally avoid doing this unless we are writing library code”\n“It’s a good idea to begin variable names with a lowercase letter”\nPython reserves 33 key words, such as and, if, True, def\n“A statement is a unit of code that the Python interpreter can execute”\nexponentiation operator: **, e.g. 3 ** 2 equals 9\nmodulus operator: %, e.g. 12 % 7 returns 5; quotient operator: //, e.g. 12 // 7 returns 1\n# is for commenting out\nA module is a collection of variables and functions.\n\nCh 3 Conditional execution\n\nBoolean expressions: x == y, x != y, x &gt; y, x &lt; y, x &gt;= y, x &lt;= y, x is y, x is not y\nLogical operators: and, or, not\nAny nonzero number is interpreted as True\nConditional execution: using if, else, elif — Don’t forget “:”\nUse try : and except :\n# case 1\nif sth :\n   execution statement\n\n# case 2\nif sth :\n   ...\nelse :\n   ...\n\n# case 3\nif sth :\n   ...\nelif sth :\n   ...\nelif sth :\n   ...\nelse :\n   ...\n\n# case 4\nif sth :\n   ...\nelif sth :\n   ...\nelif sth :\n   ...\n\nCh 4 Functions\n def func_name(arg_1, arg_2) :\n     body of the function\n\n“A function is named sequence of statements that performs a computation.”\nExamples of built-in functions: type, max, min, len, int, str\nExample functions in random module: random.random(), random.randint(), random.choice()\nExample functions in math module: math.log10(), math.sin()\nfruitful function has return statement at the end; void function does not have return statement or has statement return None\n\nCh 5 Iterations\n# example 1\ns = '1234567890'\nfor i in range(10) :\n  print(s[i])\n\n# example 2\nthe_nbrs = [1, 2, 3, 4, 5, -1, 6, 7, 8, 9, -2, -5, 10]\nt = 0\nfor a in the_nbrs :\n  if a &lt; 0 :\n      continue\n  t = t + a\nprint(\"The total of positive number is: \", t)\n\n# example 3\na_list = list()\nwhile True :\n  my_input = input(\"Enter a letter :\")\n  if my_input == 'z' :\n      break\n  a_list.append(my_input)\nprint(a_list)\nCh 6 Strings\n\n“A string is a sequence of characters. We can access the characters one at a time with the bracket operator.”\nTo have length, we use the function len()\nThe index of a string s ranges from 0 to len(s) - 1\nString slice: s[m:n] returns s[m], s[m+1], ..., s[n-1]. If m &gt;= n, then returns an empty string (a string with length 0). s[:n] returns s[0], ..., s[n-1]. s[m:] returns s[m], ..., s[len(s) - 1]. s[-1] returns s[len(s) - 1]. s[:] returns the whole string.\nEmpty string: a string with no character and length 0, represented by two quotation marks. Example: s = \"\". In this case, we cannot do s[0]\nStrings are immutable, that is, s = \"apple\", you cannot do s[0] = b.\n\"a\" in \"apple\" returns True, that is, in is a boolean operator that takes two strings and return True if the first appears as a sub-string in the second.\nThe comparison operators (e.g ‘==’, ‘&gt;’ and ‘&lt;=’) work on strings.\nString methods: dir(a_string) lists the methods; we use help(str.upper) to get help on a method (e.g. upper) for string.\nExample: s = 'apple', new_string = s.upper() Now new_string is ‘APPLE’.\nExample: line = \"  here we go  \", line.strip() gives “here we go”\nFormat operator: When applied to integers, % is the modulus operator. But when the first operand is a string, % is the format operator.\nExample: monkey = 45; \"%d\" % monkey gives string \"45\"\nExample: \"In %d years I have spotted %g %s\" % (3, 2.5, 'houses!') gives a string: “In 3 years I have spotted 2.5 houses!”\n\ns_1 = 'abce'\ns_2 = 'lmno'\ns_3 = s_1 + s_2 # 'abcelmno'\ns = \"\" # empty string\nprint(s[0]) # IndexError: string index out of range\nCh 7 Files\n\nOpen a file: f_handle = open(\"file_name\")\n\\n is a character\nReading files line by line:\nf_handle = open(\"file_name\")\ncount = 0\nfor line in f_handle :\n    count = count + 1\nprint('Line count:', count)\nIf you know the file is relatively small compared with the size of main memory, then you can read the whole file into one string using the method read:\nf_handle = open(\"file_name\")\na_string = f_handle.read()\nprint(len(a_string))\nSearching trough a file:\nf_handle = open(\"file_name\")\nfor line in f_handle :\n    if line.startswith('From:') :\n        line = line.rstrip() # to strip '\\n' and white space from the right\n        print(line)    \nUsing try and except\nf_name = input(\"Enter the file name: \")\ntry :\n    f_handle = open(f_name)\nexcept :\n    message = \"%s cannot be opened!\" % f_name\n    print(message)\nWriting files:\nf_handle = open(\"output.txt\", 'w')\nline_1 = \"This is a line for testing.\\n\"\nf_handle.write(line_1)\nline_2 = \"The second line for testing.\\n\"\nf_handle.write(line_2)\nf_handle.close\nIMPORTANT: If the file already exists, opening it in write mode clears out the old data and starts fresh, so be careful! If the file does not exist, a new one is created.\n\nCh 8 Lists\n\na list is a sequence of values\nmy_list = [1, 2, 3, 'apple', 'banana', ['hello', 'world']]\nempty_list = []\nIn a string, the values are characters; in a list, they can be any type.\nUnlike strings, lists are mutable because you can change the order of items in a list or reassign an item in a list.\nrange(n) returns a list of indices from 0 to n-1\nList operations\na = [1, 2, 3]\nb = [4, 5]\nc = a + b # returns [1, 2, 3, 4, 5]\nd = b * 2 # returns [4, 5, 4, 5]\na_list.sort() arranges the elements of the list from low to high (NB: a_list has been modified)\nnew_list = sorted(a_list) returns a new list, where the elements are the same in a_list but in order from low to high\nDeleting elements\na_list = ['a', 'b', 'c', 'd', 'e', 'f']\ndel a_list[1:5] # now a_list becomes ['a', 'f'] --- note the slice operator [1:5]\nA string is a sequence of characters and a list is a sequence of values, but a list of characters is not the same as a string. To convert from a string to a list of character, we can do list(a_string)\nThe list function breaks a string into individual letters. If we want to break a string into words, we use split method\nIt is important to distinguish between operations that modify lists and operations that create new lists. For example, append method modifies a list, but the + operator creates a new list.\nIf we want to use a method like sort that modifies the argument, but we need to keep the original list as well, we can make a copy:\norig = t[:]\nt.sort()\nList of tuple\n# Example: list of tuple\na_dic = {'a': 1, 'b': 2, 'c': 3}\nmy_list = list()\nfor key, value in list(a_dic.items()) :\n    my_list.append((value, key))\nprint(my_list)    \n\nCh 9 Dictionaries\n\nIn a dictionary, the indices can be (almost) any type. In a list, the indices must be integers (starting from 0).\nDictiary: a list of key-value pairs\nExample:\nempty_dic = dict()\neng2spanish = {'one': 'uno', 'two': 'dos', 'three': 'tres'}\npirnt(eng2spanish.keys()) # keys\nprint(eng2spanish.values()) # values\nThe order of items in a dictionary is unpredictable.\nThe len works on dictionaries.\nThe in works on dictionaries; it tells you whether something appears as a key in the dictionary\nlist(a_dict.values()) returns a list, that contains dic_values in it\nusing a_dic.get(a_key_value, a_default_value) : if the a_key_value appears in the dictionary then return the corresponding value; otherwise it the returns the default value\nOne of the common uses of a dictionary is to count the occurrence of words in a text file.\nmy_counter = dict()\nf_handle = open(\"a_text.text\")\nfor line in f_handle :\n    line = line.rstrip()\n    words = line.split()\n    for w in words :\n        my_counter[w] = my_counter.get(w, 0) + 1\nprint(my_counter)\nline.translate(line.maketrans(fromstr, tostr, deletestr))\nline = line.translate(line.maketrans('', '', string.punctuation)) # remove punctuation\nline = line.lower() # lower case\nwords = line.split() # words\n\nCh 10 Tuples\n\nA tuple: t = (1, 23, 'a', 'b', [1, 2, 3]).\nTuples are immutable.\nTuples are comparable and hashable so we can sort lists of them and use tuples as key values in Python dictionaries.\nA tuple with a singl element: t = ('a', ) — there must be a comma!\nswap values in two variables:\na = 5\nb = 8\nprint(a, b)\n(a, b) = (b, a)\nprint(a, b)\nlist(a_dic.items()) returns a list of tuples, where the elements are the key-value pairs.\na_dic = {'c': 10, 'a': 20, 'b': 30}\nL = list(a_dic.items())\nprint(L)\nL.sort()\nprint(L)\nusing two variables in for loop\nd = {'a': 10, 'b': 20, 'c': 0}\nL = list()\nfor key, val in d.items() :\n  L.append((val, key))\nL.sort(reverse = True)\nprint(L)\nusing tuples as keys in dictionaries\ndirectory = dict()\ndirectory[last_name, first_name] = tel_nbr\n\nfor last, first in directory :\n  print(first, last, dirctory[last, first])\nIf we are passing a sequence as an argument to a function, using tuples reduces the potential for unexpected behavior due to aliasing.\nlist []; dictionary {}; tuple ()\nAn example:\nd = {'a': 1, 'b': 2, 'c': 3}\nlist(d.keys()) # a list of characters, ['a', 'b', 'c']\nlist(d.values()) # a list of numbers, [1, 2, 3]\nlist(d.items()) # a list of tuples [('a', 1), ('b', 2), ('c', 3)]\n\nCh 11 Regular expressions\n\nUsing library/module re\nimport re\ns = 'ioewr987hjfowijrw;ofisopyuh3we'\nif re.search('[0-9]', s) :\n  print(\"a number found\")\nre.findall(\"([0-9]+)\", s) # return a list\n\nCh 12, 13 Network programming (mostly skipped)\nCh 14 Object oriented programming\nCh 15 Database (mostly skipped)\nCh 16 Applications (mostly skipped)",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Summary of *PY4E*</span>"
    ]
  },
  {
    "objectID": "list_vs_tuple.html",
    "href": "list_vs_tuple.html",
    "title": "2  Lists vs. Tuples",
    "section": "",
    "text": "2.1 Key differences between List and Tuple",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Lists vs. Tuples</span>"
    ]
  },
  {
    "objectID": "list_vs_tuple.html#key-differences-between-list-and-tuple",
    "href": "list_vs_tuple.html#key-differences-between-list-and-tuple",
    "title": "2  Lists vs. Tuples",
    "section": "",
    "text": "Feature\nList\nTuple\n\n\n\n\nMutability\nMutable (can be changed)\nImmutable (cannot be changed)\n\n\nSyntax\nDefined using []\nDefined using ()\n\n\nPerformance\nSlightly slower\nSlightly faster\n\n\nUse case\nWhen you need to modify data\nWhen data should not change",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Lists vs. Tuples</span>"
    ]
  },
  {
    "objectID": "list_vs_tuple.html#examples",
    "href": "list_vs_tuple.html#examples",
    "title": "2  Lists vs. Tuples",
    "section": "2.2 Examples",
    "text": "2.2 Examples\nExample 1: Mutability\n# List example\nmy_list = [1, 2, 3]\nmy_list[0] = 10      # This works\nprint(my_list)       # Output: [10, 2, 3]\n\n# Tuple example\nmy_tuple = (1, 2, 3)\n# my_tuple[0] = 10    # ❌ This will raise a TypeError\nExample 2: Append elements\n# Lists allow appending\nmy_list.append(4)\nprint(my_list)       # Output: [10, 2, 3, 4]\n\n# Tuples do not allow appending\n# my_tuple.append(4)  # ❌ AttributeError\nExample 3: Using as dictionary keys\n# Tuples can be used as dictionary keys\nmy_dict = {(1, 2): \"a pair\"}\nprint(my_dict[(1, 2)])  # Output: \"a pair\"\n\n# Lists cannot be used as dictionary keys\n# my_dict = {[1, 2]: \"a pair\"}  # ❌ TypeError",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Lists vs. Tuples</span>"
    ]
  },
  {
    "objectID": "list_vs_tuple.html#summary",
    "href": "list_vs_tuple.html#summary",
    "title": "2  Lists vs. Tuples",
    "section": "2.3 Summary",
    "text": "2.3 Summary\n\nUse a list when we need to modify the data (e.g., adding, removing, updating items).\nUse a tuple when we want to ensure the data stays constant (e.g., coordinates, fixed settings, dictionary keys).",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Lists vs. Tuples</span>"
    ]
  },
  {
    "objectID": "regular_expression_table.html",
    "href": "regular_expression_table.html",
    "title": "3  Regular expression table",
    "section": "",
    "text": "NB: The following contents are from ChatGpt\n\n\n\n\n\n\n\nRegular Expression\nDescription\n\n\n\n\n.\nMatches any character except a newline\n\n\n^\nMatches the start of a string\n\n\n$\nMatches the end of a string\n\n\n\\d\nMatches any digit (0-9)\n\n\n\\D\nMatches any non-digit character\n\n\n\\w\nMatches any word character (letters, digits, underscore)\n\n\n\\W\nMatches any non-word character\n\n\n\\s\nMatches any whitespace (space, tab, newline)\n\n\n\\S\nMatches any non-whitespace character\n\n\n\\b\nMatches a word boundary\n\n\n\\B\nMatches a non-word boundary\n\n\n[abc]\nMatches any character inside the brackets (a, b, or c)\n\n\n[^abc]\nMatches any character not inside the brackets\n\n\n[a-z]\nMatches any lowercase letter from a to z\n\n\n[A-Z]\nMatches any uppercase letter from A to Z\n\n\n[0-9]\nMatches any digit from 0 to 9\n\n\na|b\nMatches either ‘a’ or ‘b’\n\n\n()\nGroups expressions together for capturing\n\n\n(?:...)\nGroups expressions together without capturing\n\n\na*\nMatches ‘a’ zero or more times\n\n\na+\nMatches ‘a’ one or more times\n\n\na?\nMatches ‘a’ zero or one time\n\n\na{3}\nMatches exactly 3 occurrences of ‘a’\n\n\na{3,}\nMatches 3 or more occurrences of ‘a’\n\n\na{3,5}\nMatches between 3 and 5 occurrences of ‘a’\n\n\n(?=...)\nPositive lookahead (ensures match is followed by …)\n\n\n(?!...)\nNegative lookahead (ensures match is not followed by …)\n\n\n(?&lt;=...)\nPositive lookbehind (ensures match is preceded by …)\n\n\n(?&lt;!...)\nNegative lookbehind (ensures match is not preceded by …)",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Regular expression table</span>"
    ]
  },
  {
    "objectID": "string_tips.html",
    "href": "string_tips.html",
    "title": "4  String Tips",
    "section": "",
    "text": "4.1 Get a string reversed\ndef rev_str(s) :\n    return s[::-1]\n\n# test\ns = 'apple'\nrev_str(s)\n\n'elppa'",
    "crumbs": [
      "Part III Tips",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>String Tips</span>"
    ]
  },
  {
    "objectID": "string_tips.html#strip-out-all-spaces",
    "href": "string_tips.html#strip-out-all-spaces",
    "title": "4  String Tips",
    "section": "4.2 Strip out all spaces",
    "text": "4.2 Strip out all spaces\n\ndef my_strip(s) :\n    return \" \".join(s.split())\n\n# test\nss = \"   This     is    a    strange    sentence.    \"\nprint(ss.lstrip())\nprint(ss.rstrip())\nprint(ss.strip())\nprint(ss.lstrip() is ss.strip())\nprint(my_strip(ss))\n\nThis     is    a    strange    sentence.    \n   This     is    a    strange    sentence.\nThis     is    a    strange    sentence.\nFalse\nThis is a strange sentence.",
    "crumbs": [
      "Part III Tips",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>String Tips</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Learning Python Notes",
    "section": "",
    "text": "Preface\nThe why, what and how questions. I wanted to learn Python. As with many things I do, I first asked myself the following questions:\n\nWhy learn Python?\nWhat should I learn?\nHow should I learn it?\n\nAmong these three, I think the easiest question to answer was the third one. My answer: by reading the books Python for Everybody and Think Python. While reading, I took notes and completed some exercises.\nAs for the why question, I had a vague answer: Python is a general-purpose language, and it’s useful.\nFor the what question, my answer was that I want to use python in the numerical computing, text mining and other areas.\nThis book has three parts:\n\nBasics\nExamples in\n\nnumerical computing\ntext mining\nother\n\nTips",
    "crumbs": [
      "Preface"
    ]
  }
]