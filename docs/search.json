[
  {
    "objectID": "summaryBook.html",
    "href": "summaryBook.html",
    "title": "1  Summary of PY4E",
    "section": "",
    "text": "1.1 Intro. to Computer and computer languages (Ch 1)",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Summary of *PY4E*</span>"
    ]
  },
  {
    "objectID": "summaryBook.html#intro.-to-computer-and-computer-languages-ch-1",
    "href": "summaryBook.html#intro.-to-computer-and-computer-languages-ch-1",
    "title": "1  Summary of PY4E",
    "section": "",
    "text": "computer: Input/output devices; CPU; main memory (RAM); secondary memory; network\nmachine language; low level language; high level language\n“The Python interpreter is written in a high-level language called ‘C’.”\n“Python scripts have names end with .py”\nImportant concepts: input and output; sequential execution, conditional execution, and repeated execution; reuse.\nThree general types of errors: syntax errors, logic errors, and semantic errors (the code runs without producting an error message, but it does not do the “right” thing.)",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Summary of *PY4E*</span>"
    ]
  },
  {
    "objectID": "summaryBook.html#variables-expressions-and-statements-ch-2",
    "href": "summaryBook.html#variables-expressions-and-statements-ch-2",
    "title": "1  Summary of PY4E",
    "section": "1.2 Variables, expressions and statements (Ch 2)",
    "text": "1.2 Variables, expressions and statements (Ch 2)\n\nPython is case sensitive, that is, A is different from a\nVariable names can contain both letters and numbers, but they cannot start with a number\n“Variable names can start with an underscore character, but we generally avoid doing this unless we are writing library code”\n“It’s a good idea to begin variable names with a lowercase letter”\nPython reserves 33 key words, such as and, if, True, def\n“A statement is a unit of code that the Python interpreter can execute”\nexponentiation operator: **, e.g. 3 ** 2 equals 9\nmodulus operator: %, e.g. 12 % 7 returns 5; quotient operator: //, e.g. 12 // 7 returns 1\n# is for commenting out\nA module is a collection of variables and functions.",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Summary of *PY4E*</span>"
    ]
  },
  {
    "objectID": "summaryBook.html#conditional-execution-ch-3",
    "href": "summaryBook.html#conditional-execution-ch-3",
    "title": "1  Summary of PY4E",
    "section": "1.3 Conditional execution (Ch 3)",
    "text": "1.3 Conditional execution (Ch 3)\n\nBoolean expressions: x == y, x != y, x &gt; y, x &lt; y, x &gt;= y, x &lt;= y, x is y, x is not y\nLogical operators: and, or, not\nAny nonzero number is interpreted as True\nConditional execution: using if, else, elif — Don’t forget “:”\nUse try : and except :\nUse if cases:\n# case 1\nif sth :\n   execution statement\n\n# case 2\nif sth :\n   ...\nelse :\n   ...\n\n# case 3\nif sth :\n   ...\nelif sth :\n   ...\nelif sth :\n   ...\nelse :\n   ...\n\n# case 4\nif sth :\n   ...\nelif sth :\n   ...\nelif sth :\n   ...",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Summary of *PY4E*</span>"
    ]
  },
  {
    "objectID": "summaryBook.html#functions-ch-4",
    "href": "summaryBook.html#functions-ch-4",
    "title": "1  Summary of PY4E",
    "section": "1.4 Functions (Ch 4)",
    "text": "1.4 Functions (Ch 4)\ndef func_name(arg_1, arg_2) : \n    body of the function\n\n“A function is named sequence of statements that performs a computation.”\nExamples of built-in functions: type, max, min, len, int, str\nExample functions in random module: random.random(), random.randint(), random.choice()\nExample functions in math module: math.log10(), math.sin()\nfruitful function has return statement at the end; void function does not have return statement or has statement return None",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Summary of *PY4E*</span>"
    ]
  },
  {
    "objectID": "summaryBook.html#iterations-ch-5",
    "href": "summaryBook.html#iterations-ch-5",
    "title": "1  Summary of PY4E",
    "section": "1.5 Iterations (Ch 5)",
    "text": "1.5 Iterations (Ch 5)\n# example 1\ns = '1234567890'\nfor i in range(10) :\n  print(s[i])\n\n# example 2\nthe_nbrs = [1, 2, 3, 4, 5, -1, 6, 7, 8, 9, -2, -5, 10]\nt = 0\nfor a in the_nbrs :\n  if a &lt; 0 :\n      continue\n  t = t + a\nprint(\"The total of positive number is: \", t)\n\n# example 3\na_list = list()\nwhile True :\n  my_input = input(\"Enter a letter :\")\n  if my_input == 'z' :\n      break\n  a_list.append(my_input)\nprint(a_list)",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Summary of *PY4E*</span>"
    ]
  },
  {
    "objectID": "summaryBook.html#strings-ch-6",
    "href": "summaryBook.html#strings-ch-6",
    "title": "1  Summary of PY4E",
    "section": "1.6 Strings (Ch 6)",
    "text": "1.6 Strings (Ch 6)\n\n“A string is a sequence of characters. We can access the characters one at a time with the bracket operator.”\nTo have length, we use the function len()\nThe index of a string s ranges from 0 to len(s) - 1\nString slice: s[m:n] returns s[m], s[m+1], ..., s[n-1]. If m &gt;= n, then returns an empty string (a string with length 0). s[:n] returns s[0], ..., s[n-1]. s[m:] returns s[m], ..., s[len(s) - 1]. s[-1] returns s[len(s) - 1]. s[:] returns the whole string.\nEmpty string: a string with no character and length 0, represented by two quotation marks. Example: s = \"\". In this case, we cannot do s[0]\nStrings are immutable, that is, s = \"apple\", you cannot do s[0] = b.\n\"a\" in \"apple\" returns True, that is, in is a boolean operator that takes two strings and return True if the first appears as a sub-string in the second.\nThe comparison operators (e.g ‘==’, ‘&gt;’ and ‘&lt;=’) work on strings.\nString methods: dir(a_string) lists the methods; we use help(str.upper) to get help on a method (e.g. upper) for string.\nExample: s = 'apple', new_string = s.upper() Now new_string is ‘APPLE’.\nExample: line = \"  here we go  \", line.strip() gives “here we go”\nFormat operator: When applied to integers, % is the modulus operator. But when the first operand is a string, % is the format operator.\nExample: monkey = 45; \"%d\" % monkey gives string \"45\"\nExample: \"In %d years I have spotted %g %s\" % (3, 2.5, 'houses!') gives a string: “In 3 years I have spotted 2.5 houses!”\ns_1 = 'abce'\ns_2 = 'lmno'\ns_3 = s_1 + s_2 # 'abcelmno'\ns = \"\" # empty string\nprint(s[0]) # IndexError: string index out of range",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Summary of *PY4E*</span>"
    ]
  },
  {
    "objectID": "summaryBook.html#files-ch-7",
    "href": "summaryBook.html#files-ch-7",
    "title": "1  Summary of PY4E",
    "section": "1.7 Files (Ch 7)",
    "text": "1.7 Files (Ch 7)\n\nOpen a file: f_handle = open(\"file_name\")\n\\n is a character\nReading files line by line:\nf_handle = open(\"file_name\")\ncount = 0\nfor line in f_handle :\n    count = count + 1\nprint('Line count:', count)\nIf the file is relatively small compared with the size of main memory, then we can read the whole file into one string using the method read:\nf_handle = open(\"file_name\")\na_string = f_handle.read()\nprint(len(a_string))\nSearching trough a file:\nf_handle = open(\"file_name\")\nfor line in f_handle :\n   if line.startswith('From:') :\n      line = line.rstrip() # to strip '\\n' and white space from the right\n      print(line)    \nUsing try and except\nf_name = input(\"Enter the file name: \")\ntry :\n    f_handle = open(f_name)\nexcept :\n    message = \"%s cannot be opened!\" % f_name\n    print(message)\nWriting files:\nf_handle = open(\"output.txt\", 'w')\nline_1 = \"This is a line for testing.\\n\"\nf_handle.write(line_1)\nline_2 = \"The second line for testing.\\n\"\nf_handle.write(line_2)\nf_handle.close\nIMPORTANT: “If the file already exists, opening it in write mode clears out the old data and starts fresh, so be careful! If the file does not exist, a new one is created.”",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Summary of *PY4E*</span>"
    ]
  },
  {
    "objectID": "summaryBook.html#lists-ch-8",
    "href": "summaryBook.html#lists-ch-8",
    "title": "1  Summary of PY4E",
    "section": "1.8 Lists (Ch 8)",
    "text": "1.8 Lists (Ch 8)\n\na list is a sequence of values of any type:\nmy_list = [1, 2, 3, 'apple', 'banana', ['hello', 'world']]\nempty_list = []\n“In a string, the values are characters; in a list, they can be any type.”\n“Unlike strings, lists are mutable because you can change the order of items in a list or reassign an item in a list.”\nList operations\na = [1, 2, 3]\nb = [4, 5]\nc = a + b # returns [1, 2, 3, 4, 5]\nd = b * 2 # returns [4, 5, 4, 5]\na_list.sort() arranges the elements of the list from low to high (NB: a_list has been modified)\nnew_list = sorted(a_list) returns a new list, where the elements are the same in a_list but in order from low to high\nDeleting elements\na_list = ['a', 'b', 'c', 'd', 'e', 'f']\ndel a_list[1:5] # now a_list becomes ['a', 'f'] --- note the slice operator [1:5]\nTo convert from a string to a list of character, we can use list(a_string)”\n“The list function breaks a string into individual letters.” If we want to break a string into words, we use split method\n“It is important to distinguish between operations that modify lists and operations that create new lists. For example, append method modifies a list, but the + operator creates a new list.”\nIf we want to use a method like sort that modifies the argument, and we need to keep the original list as well, we can make a copy:\norig = t[:]\nt.sort()\nList of tuple\n# Example: list of tuple\na_dic = {'a': 1, 'b': 2, 'c': 3}\nmy_list = list()\nfor key, value in list(a_dic.items()) :\n    my_list.append((value, key))\nprint(my_list)",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Summary of *PY4E*</span>"
    ]
  },
  {
    "objectID": "summaryBook.html#dictionaries-ch-9",
    "href": "summaryBook.html#dictionaries-ch-9",
    "title": "1  Summary of PY4E",
    "section": "1.9 Dictionaries (Ch 9)",
    "text": "1.9 Dictionaries (Ch 9)\n\nIn a dictionary, the indices can be (almost) any type. In a list, the indices must be integers (starting from 0).\nDictionary: a list of key-value pairs\nExample:\nempty_dic = dict()\neng2spanish = {'one': 'uno', 'two': 'dos', 'three': 'tres'}\npirnt(eng2spanish.keys()) # keys\nprint(eng2spanish.values()) # values\n“The order of items in a dictionary is unpredictable.”\n“The len works on dictionaries.”\n“The in works on dictionaries; it tells you whether something appears as a key in the dictionary”\nlist(a_dict.values()) returns a list, that contains dic_values in it\nusing a_dic.get(a_key_value, a_default_value) : if the a_key_value appears in the dictionary then return the corresponding value; otherwise it returns the default value\n“One of the common uses of a dictionary is to count the occurrence of words in a text file.”\n my_counter = dict()\n f_handle = open(\"a_text.text\")\n for line in f_handle :\n     line = line.rstrip()\n     words = line.split()\n     for w in words :\n         my_counter[w] = my_counter.get(w, 0) + 1\n print(my_counter)\nline.translate(line.maketrans(fromstr, tostr, deletestr))\nline = line.translate(line.maketrans('', '', string.punctuation)) # remove punctuation\nline = line.lower() # lower case\nwords = line.split() # words",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Summary of *PY4E*</span>"
    ]
  },
  {
    "objectID": "summaryBook.html#tuples-ch-10",
    "href": "summaryBook.html#tuples-ch-10",
    "title": "1  Summary of PY4E",
    "section": "1.10 Tuples (Ch 10)",
    "text": "1.10 Tuples (Ch 10)\n\nA tuple: t = (1, 23, 'a', 'b', [1, 2, 3]).\nTuples are immutable.\nTuples are comparable and hashable so we can sort lists of them and use tuples as key values in Python dictionaries.\nA tuple with a singl element: t = ('a', ) — there must be a comma!\nswap values in two variables:\na = 5\nb = 8\nprint(a, b)\n(a, b) = (b, a)\nprint(a, b)\nlist(a_dic.items()) returns a list of tuples, where the elements are the key-value pairs.\na_dic = {'c': 10, 'a': 20, 'b': 30}\nL = list(a_dic.items())\nprint(L)\nL.sort()\nprint(L)\nusing two variables in for loop\nd = {'a': 10, 'b': 20, 'c': 0}\nL = list()\nfor key, val in d.items() :\n  L.append((val, key))\nL.sort(reverse = True)\nprint(L)\nusing tuples as keys in dictionaries\ndirectory = dict()\ndirectory[last_name, first_name] = tel_nbr\n\nfor last, first in directory :\n  print(first, last, dirctory[last, first])\nlist []; dictionary {}; tuple ()\nAn example:\nd = {'a': 1, 'b': 2, 'c': 3}\nlist(d.keys()) # a list of characters, ['a', 'b', 'c']\nlist(d.values()) # a list of numbers, [1, 2, 3]\nlist(d.items()) # a list of tuples [('a', 1), ('b', 2), ('c', 3)]",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Summary of *PY4E*</span>"
    ]
  },
  {
    "objectID": "summaryBook.html#regular-expressions-ch-11",
    "href": "summaryBook.html#regular-expressions-ch-11",
    "title": "1  Summary of PY4E",
    "section": "1.11 Regular expressions (Ch 11)",
    "text": "1.11 Regular expressions (Ch 11)\n\nUsing library/module re\nimport re\ns = 'ioewr987hjfowijrw;ofisopyuh3we'\nif re.search('[0-9]', s) :\n  print(\"a number found\")\nre.findall(\"([0-9]+)\", s) # return a list: ['987', '3']",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Summary of *PY4E*</span>"
    ]
  },
  {
    "objectID": "summaryBook.html#network-programming-ch-12-13-mostly-skipped",
    "href": "summaryBook.html#network-programming-ch-12-13-mostly-skipped",
    "title": "1  Summary of PY4E",
    "section": "1.12 Network programming (Ch 12, 13, mostly skipped)",
    "text": "1.12 Network programming (Ch 12, 13, mostly skipped)",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Summary of *PY4E*</span>"
    ]
  },
  {
    "objectID": "summaryBook.html#object-oriented-programming-ch-14",
    "href": "summaryBook.html#object-oriented-programming-ch-14",
    "title": "1  Summary of PY4E",
    "section": "1.13 Object oriented programming (Ch 14)",
    "text": "1.13 Object oriented programming (Ch 14)",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Summary of *PY4E*</span>"
    ]
  },
  {
    "objectID": "summaryBook.html#database-ch-15-mostly-skipped",
    "href": "summaryBook.html#database-ch-15-mostly-skipped",
    "title": "1  Summary of PY4E",
    "section": "1.14 Database (Ch 15, mostly skipped)",
    "text": "1.14 Database (Ch 15, mostly skipped)",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Summary of *PY4E*</span>"
    ]
  },
  {
    "objectID": "summaryBook.html#applications-ch-16-mostly-skipped",
    "href": "summaryBook.html#applications-ch-16-mostly-skipped",
    "title": "1  Summary of PY4E",
    "section": "1.15 Applications (Ch 16, mostly skipped)",
    "text": "1.15 Applications (Ch 16, mostly skipped)",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Summary of *PY4E*</span>"
    ]
  },
  {
    "objectID": "list_vs_tuple.html",
    "href": "list_vs_tuple.html",
    "title": "2  Lists vs. Tuples",
    "section": "",
    "text": "2.1 Key differences between List and Tuple",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Lists vs. Tuples</span>"
    ]
  },
  {
    "objectID": "list_vs_tuple.html#key-differences-between-list-and-tuple",
    "href": "list_vs_tuple.html#key-differences-between-list-and-tuple",
    "title": "2  Lists vs. Tuples",
    "section": "",
    "text": "Feature\nList\nTuple\n\n\n\n\nMutability\nMutable (can be changed)\nImmutable (cannot be changed)\n\n\nSyntax\nDefined using []\nDefined using ()\n\n\nPerformance\nSlightly slower\nSlightly faster\n\n\nUse case\nWhen you need to modify data\nWhen data should not change",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Lists vs. Tuples</span>"
    ]
  },
  {
    "objectID": "list_vs_tuple.html#examples",
    "href": "list_vs_tuple.html#examples",
    "title": "2  Lists vs. Tuples",
    "section": "2.2 Examples",
    "text": "2.2 Examples\nExample 1: Mutability\n# List example\nmy_list = [1, 2, 3]\nmy_list[0] = 10      # This works\nprint(my_list)       # Output: [10, 2, 3]\n\n# Tuple example\nmy_tuple = (1, 2, 3)\n# my_tuple[0] = 10    # ❌ This will raise a TypeError\nExample 2: Append elements\n# Lists allow appending\nmy_list.append(4)\nprint(my_list)       # Output: [10, 2, 3, 4]\n\n# Tuples do not allow appending\n# my_tuple.append(4)  # ❌ AttributeError\nExample 3: Using as dictionary keys\n# Tuples can be used as dictionary keys\nmy_dict = {(1, 2): \"a pair\"}\nprint(my_dict[(1, 2)])  # Output: \"a pair\"\n\n# Lists cannot be used as dictionary keys\n# my_dict = {[1, 2]: \"a pair\"}  # ❌ TypeError",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Lists vs. Tuples</span>"
    ]
  },
  {
    "objectID": "list_vs_tuple.html#summary",
    "href": "list_vs_tuple.html#summary",
    "title": "2  Lists vs. Tuples",
    "section": "2.3 Summary",
    "text": "2.3 Summary\n\nUse a list when we need to modify the data (e.g., adding, removing, updating items).\nUse a tuple when we want to ensure the data stays constant (e.g., coordinates, fixed settings, dictionary keys).",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Lists vs. Tuples</span>"
    ]
  },
  {
    "objectID": "regular_expression_table.html",
    "href": "regular_expression_table.html",
    "title": "3  Regular expression table",
    "section": "",
    "text": "NB: The following content is from ChatGPT.\n\n\n\n\n\n\n\nRegular Expression\nDescription\n\n\n\n\n.\nMatches any character except a newline\n\n\n^\nMatches the start of a string\n\n\n$\nMatches the end of a string\n\n\n\\d\nMatches any digit (0-9)\n\n\n\\D\nMatches any non-digit character\n\n\n\\w\nMatches any word character (letters, digits, underscore)\n\n\n\\W\nMatches any non-word character\n\n\n\\s\nMatches any whitespace (space, tab, newline)\n\n\n\\S\nMatches any non-whitespace character\n\n\n\\b\nMatches a word boundary\n\n\n\\B\nMatches a non-word boundary\n\n\n[abc]\nMatches any character inside the brackets (a, b, or c)\n\n\n[^abc]\nMatches any character not inside the brackets\n\n\n[a-z]\nMatches any lowercase letter from a to z\n\n\n[A-Z]\nMatches any uppercase letter from A to Z\n\n\n[0-9]\nMatches any digit from 0 to 9\n\n\na|b\nMatches either ‘a’ or ‘b’\n\n\n()\nGroups expressions together for capturing\n\n\n(?:...)\nGroups expressions together without capturing\n\n\na*\nMatches ‘a’ zero or more times\n\n\na+\nMatches ‘a’ one or more times\n\n\na?\nMatches ‘a’ zero or one time\n\n\na{3}\nMatches exactly 3 occurrences of ‘a’\n\n\na{3,}\nMatches 3 or more occurrences of ‘a’\n\n\na{3,5}\nMatches between 3 and 5 occurrences of ‘a’\n\n\n(?=...)\nPositive lookahead (ensures match is followed by …)\n\n\n(?!...)\nNegative lookahead (ensures match is not followed by …)\n\n\n(?&lt;=...)\nPositive lookbehind (ensures match is preceded by …)\n\n\n(?&lt;!...)\nNegative lookbehind (ensures match is not preceded by …)",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Regular expression table</span>"
    ]
  },
  {
    "objectID": "python_packages.html",
    "href": "python_packages.html",
    "title": "4  Most useful Python packages: ChatGPT’s answer",
    "section": "",
    "text": "4.1 General-Purpose Utilities",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Most useful Python packages: ChatGPT's answer</span>"
    ]
  },
  {
    "objectID": "python_packages.html#general-purpose-utilities",
    "href": "python_packages.html#general-purpose-utilities",
    "title": "4  Most useful Python packages: ChatGPT’s answer",
    "section": "",
    "text": "numpy – Fast numerical computing with arrays.\npandas – Data manipulation and analysis.\nmatplotlib – Basic plotting and visualization.\nseaborn – Advanced statistical visualizations.\nscipy – Scientific computing (optimization, integration, etc.).",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Most useful Python packages: ChatGPT's answer</span>"
    ]
  },
  {
    "objectID": "python_packages.html#machine-learning-ai",
    "href": "python_packages.html#machine-learning-ai",
    "title": "4  Most useful Python packages: ChatGPT’s answer",
    "section": "4.2 Machine Learning & AI",
    "text": "4.2 Machine Learning & AI\n\nscikit-learn – Classic machine learning models.\ntensorflow – Deep learning.\ntorch – PyTorch, an alternative to TensorFlow.\nxgboost – Gradient boosting (for structured data).\nhuggingface/transformers – NLP and large language models.",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Most useful Python packages: ChatGPT's answer</span>"
    ]
  },
  {
    "objectID": "python_packages.html#data-science-statistics",
    "href": "python_packages.html#data-science-statistics",
    "title": "4  Most useful Python packages: ChatGPT’s answer",
    "section": "4.3 Data Science & Statistics",
    "text": "4.3 Data Science & Statistics\n\nstatsmodels – Statistical models (regression, time series).\nsympy – Symbolic mathematics.\nnetworkx – Graphs and network analysis.",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Most useful Python packages: ChatGPT's answer</span>"
    ]
  },
  {
    "objectID": "python_packages.html#web-scraping-automation",
    "href": "python_packages.html#web-scraping-automation",
    "title": "4  Most useful Python packages: ChatGPT’s answer",
    "section": "4.4 Web Scraping & Automation",
    "text": "4.4 Web Scraping & Automation\n\nrequests – HTTP requests.\nbeautifulsoup4 – Web scraping.\nselenium – Automating browsers.\nscrapy – Advanced web scraping framework",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Most useful Python packages: ChatGPT's answer</span>"
    ]
  },
  {
    "objectID": "python_packages.html#data-visualization-dashboards",
    "href": "python_packages.html#data-visualization-dashboards",
    "title": "4  Most useful Python packages: ChatGPT’s answer",
    "section": "4.5 Data Visualization & Dashboards",
    "text": "4.5 Data Visualization & Dashboards\n\nplotly – Interactive plots.\nbokeh – Web-based visualizations.\naltair – Declarative statistical visualization.\ndash – Web apps for data visualization.",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Most useful Python packages: ChatGPT's answer</span>"
    ]
  },
  {
    "objectID": "python_packages.html#web-development-apis",
    "href": "python_packages.html#web-development-apis",
    "title": "4  Most useful Python packages: ChatGPT’s answer",
    "section": "4.6 Web Development & APIs",
    "text": "4.6 Web Development & APIs\n\nflask – Lightweight web framework.\nfastapi – Fast APIs with automatic documentation.\ndjango – Full-featured web framework.",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Most useful Python packages: ChatGPT's answer</span>"
    ]
  },
  {
    "objectID": "python_packages.html#file-handling-system-tasks",
    "href": "python_packages.html#file-handling-system-tasks",
    "title": "4  Most useful Python packages: ChatGPT’s answer",
    "section": "4.7 File Handling & System Tasks",
    "text": "4.7 File Handling & System Tasks\n\nos – Interacting with the operating system.\nshutil – File operations.\npathlib – Modern file path handling.\npillow – Image processing.",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Most useful Python packages: ChatGPT's answer</span>"
    ]
  },
  {
    "objectID": "python_packages.html#performance-parallel-computing",
    "href": "python_packages.html#performance-parallel-computing",
    "title": "4  Most useful Python packages: ChatGPT’s answer",
    "section": "4.8 Performance & Parallel Computing",
    "text": "4.8 Performance & Parallel Computing\n\nnumba – JIT compilation for speed.\nmultiprocessing – Parallel computing.\njoblib – Parallelization made easy.",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Most useful Python packages: ChatGPT's answer</span>"
    ]
  },
  {
    "objectID": "python_packages.html#security-cryptography",
    "href": "python_packages.html#security-cryptography",
    "title": "4  Most useful Python packages: ChatGPT’s answer",
    "section": "4.9 Security & Cryptography",
    "text": "4.9 Security & Cryptography\n\ncryptography – Encryption and security.\nhashlib – Hashing algorithms.",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Most useful Python packages: ChatGPT's answer</span>"
    ]
  },
  {
    "objectID": "python_packages.html#bonus-ai-chatbots",
    "href": "python_packages.html#bonus-ai-chatbots",
    "title": "4  Most useful Python packages: ChatGPT’s answer",
    "section": "4.10 Bonus: AI & Chatbots",
    "text": "4.10 Bonus: AI & Chatbots\n\nopenai – OpenAI’s API for ChatGPT and other models.\nlangchain – Building AI-powered applications.",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Most useful Python packages: ChatGPT's answer</span>"
    ]
  },
  {
    "objectID": "python_packages.html#how-to-install-a-package",
    "href": "python_packages.html#how-to-install-a-package",
    "title": "4  Most useful Python packages: ChatGPT’s answer",
    "section": "4.11 How to install a package",
    "text": "4.11 How to install a package\npip install package_name",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Most useful Python packages: ChatGPT's answer</span>"
    ]
  },
  {
    "objectID": "python_packages.html#how-to-check-a-package-is-available",
    "href": "python_packages.html#how-to-check-a-package-is-available",
    "title": "4  Most useful Python packages: ChatGPT’s answer",
    "section": "4.12 How to check a package is available",
    "text": "4.12 How to check a package is available\npip show package_name",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Most useful Python packages: ChatGPT's answer</span>"
    ]
  },
  {
    "objectID": "python_packages.html#how-to-show-all-installed-packages",
    "href": "python_packages.html#how-to-show-all-installed-packages",
    "title": "4  Most useful Python packages: ChatGPT’s answer",
    "section": "4.13 How to show all installed packages",
    "text": "4.13 How to show all installed packages\npip list",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Most useful Python packages: ChatGPT's answer</span>"
    ]
  },
  {
    "objectID": "deepseek_python_pkgs.html",
    "href": "deepseek_python_pkgs.html",
    "title": "5  Most useful Python package: Deep Seek’s answer",
    "section": "",
    "text": "5.1 General Utilities\nNumPy: Essential for numerical computing, offering support for arrays, matrices, and mathematical functions.\nPandas: A powerful library for data manipulation and analysis, especially with tabular data (DataFrames).\nMatplotlib: A versatile library for creating static, animated, and interactive visualizations.\nSeaborn: Built on top of Matplotlib, it provides a high-level interface for creating attractive statistical graphics.\nRequests: Simplifies making HTTP requests, commonly used for interacting with APIs.\ntqdm: Adds progress bars to loops and iterables, making it easier to track progress.",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Most useful Python package: Deep Seek's answer</span>"
    ]
  },
  {
    "objectID": "deepseek_python_pkgs.html#data-science-machine-learning",
    "href": "deepseek_python_pkgs.html#data-science-machine-learning",
    "title": "5  Most useful Python package: Deep Seek’s answer",
    "section": "5.2 Data Science & Machine Learning",
    "text": "5.2 Data Science & Machine Learning\nScikit-learn: A comprehensive library for machine learning, including tools for classification, regression, clustering, and more.\nTensorFlow and PyTorch: Leading libraries for deep learning and neural networks.\nKeras: A high-level API for building and training neural networks, often used with TensorFlow.\nXGBoost, LightGBM, and CatBoost: Optimized libraries for gradient boosting algorithms.\nStatsmodels: Provides tools for statistical modeling and hypothesis testing.\nOpenCV: A library for computer vision tasks like image and video processing.",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Most useful Python package: Deep Seek's answer</span>"
    ]
  },
  {
    "objectID": "deepseek_python_pkgs.html#web-development",
    "href": "deepseek_python_pkgs.html#web-development",
    "title": "5  Most useful Python package: Deep Seek’s answer",
    "section": "5.3 Web Development",
    "text": "5.3 Web Development\nFlask: A lightweight framework for building web applications.\nDjango: A full-stack web framework with built-in features for database management, authentication, and more.\nFastAPI: A modern framework for building APIs with high performance and automatic documentation.\nBeautifulSoup and Scrapy: Libraries for web scraping and parsing HTML/XML.\nSQLAlchemy: A toolkit and ORM (Object-Relational Mapping) for working with databases.",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Most useful Python package: Deep Seek's answer</span>"
    ]
  },
  {
    "objectID": "deepseek_python_pkgs.html#automation-scripting",
    "href": "deepseek_python_pkgs.html#automation-scripting",
    "title": "5  Most useful Python package: Deep Seek’s answer",
    "section": "5.4 Automation & Scripting",
    "text": "5.4 Automation & Scripting\nos and shutil: Built-in modules for interacting with the operating system and file management.\nsubprocess: Allows you to spawn new processes and interact with them.\nargparse: Simplifies creating command-line interfaces.\nSchedule: A lightweight library for scheduling tasks.\nPyAutoGUI: Automates GUI interactions, such as mouse and keyboard control.",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Most useful Python package: Deep Seek's answer</span>"
    ]
  },
  {
    "objectID": "deepseek_python_pkgs.html#data-visualization",
    "href": "deepseek_python_pkgs.html#data-visualization",
    "title": "5  Most useful Python package: Deep Seek’s answer",
    "section": "5.5 Data Visualization",
    "text": "5.5 Data Visualization\nPlotly: A library for creating interactive and publication-quality graphs.\nBokeh: Ideal for creating interactive visualizations for web browsers.\nAltair: A declarative statistical visualization library.\nDash: A framework for building interactive web-based dashboards.",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Most useful Python package: Deep Seek's answer</span>"
    ]
  },
  {
    "objectID": "deepseek_python_pkgs.html#database-interaction",
    "href": "deepseek_python_pkgs.html#database-interaction",
    "title": "5  Most useful Python package: Deep Seek’s answer",
    "section": "5.6 Database Interaction",
    "text": "5.6 Database Interaction\npsycopg2: A PostgreSQL adapter for Python.\nSQLite3: A built-in module for working with SQLite databases.\nPyMongo: A library for interacting with MongoDB databases.\nRedis-py: A Python client for Redis, an in-memory data store.\nTesting & Debugging unittest: A built-in framework for unit testing.\npytest: A popular testing framework with simpler syntax and advanced features.\npdb: Python’s built-in debugger.\nlogging: A module for tracking events and debugging.\nNatural Language Processing (NLP) NLTK: A toolkit for working with human language data.\nspaCy: An industrial-strength NLP library for advanced text processing.\nTransformers (by Hugging Face): A library for working with state-of-the-art NLP models like BERT and GPT.\nGensim: A library for topic modeling and document similarity analysis.\nScientific Computing SciPy: Built on NumPy, it provides additional functionality for optimization, integration, and more.\nSymPy: A library for symbolic mathematics.\nAstropy: A library for astronomy and astrophysics.\nCloud & DevOps Boto3: The official AWS SDK for Python, used to interact with AWS services.\nFabric: A library for streamlining SSH and deployment tasks.\nDocker SDK: A Python library for interacting with Docker.\nGame Development Pygame: A library for creating 2D games.\nArcade: A modern alternative to Pygame for game development.\nOther Notable Packages Jupyter: An interactive notebook environment for data analysis and visualization.\nPoetry: A tool for dependency management and packaging.\nBlack: A code formatter for consistent code styling.\nFlake8: A tool for linting and enforcing code quality.\nPillow: A library for image processing and manipulation.",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Most useful Python package: Deep Seek's answer</span>"
    ]
  },
  {
    "objectID": "numerical_computing.html",
    "href": "numerical_computing.html",
    "title": "6  Numerical Computing and Simulation",
    "section": "",
    "text": "6.1 Find number of digits\nProblem: Write a function, where the input is an integer and the output is the number of digits of this number.\n# Method 1\n\nfrom math import log, floor\ndef find_nbr_of_digits_1(an_int) :\n    try:\n        return floor(log(an_int, 10)) + 1\n    except :\n        return 1    \n\n## test\nprint(find_nbr_of_digits_1(12345))\nprint(find_nbr_of_digits_1(2 ** 10))\nprint(find_nbr_of_digits_1(0))\n\n5\n4\n1\n# Method 2\n\ndef find_nbr_of_digits_2(an_int) :\n    c = 0\n    while True :\n        an_int = an_int // 10\n        c = c + 1\n        if an_int == 0 :\n            break\n    return c\n\n## test\nprint(find_nbr_of_digits_2(12345))\nprint(find_nbr_of_digits_2(2 ** 10)) \nprint(find_nbr_of_digits_2(0))   \n\n5\n4\n1",
    "crumbs": [
      "Part II Examples",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Numerical Computing and Simulation</span>"
    ]
  },
  {
    "objectID": "numerical_computing.html#the-first-fibonacci-number-greater-than-m",
    "href": "numerical_computing.html#the-first-fibonacci-number-greater-than-m",
    "title": "6  Numerical Computing and Simulation",
    "section": "6.2 The first Fibonacci number greater than m",
    "text": "6.2 The first Fibonacci number greater than m\nProblem: Let F_n be the n-th Fibonacci number. Find n, such that F_n &gt;= m, where m &gt;= 1.\n\ndef find_fibo_index(m) :\n    f1 = 1\n    f2 = 1\n    i = 2\n    if m == 1 :\n        return 1\n    else:\n        while True:\n            f = f1 + f2\n            i = i + 1\n            if f &gt;= m :\n                break\n            f1 = f2\n            f2 = f\n        return i\n\n## test\nprint(find_fibo_index(10000))\nprint(find_fibo_index(1))\nprint(find_fibo_index(2))\n\n21\n1\n3",
    "crumbs": [
      "Part II Examples",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Numerical Computing and Simulation</span>"
    ]
  },
  {
    "objectID": "numerical_computing.html#long-division",
    "href": "numerical_computing.html#long-division",
    "title": "6  Numerical Computing and Simulation",
    "section": "6.3 Long division",
    "text": "6.3 Long division\nProblem: Find n / d, where both n and d are integers but d cannot be 0.\n\ndef long_div(n, d) :\n    q_list = list()\n    r_list = list()\n    # initial\n    q = n // d\n    r = n % d\n    q_list.append(q)\n    r_list.append(r)\n    if r == 0 :\n        return [[q, r], ['No repeat']]\n    else :\n        c = 0\n        while True :\n            n = 10 * r\n            q = n // d\n            r = n % d\n            q_list.append(q)\n            r_list.append(r)\n            c = c + 1\n            if (r in r_list[:c]) or r == 0 :\n                break\n        if r_list[-1] == 0 :\n            the_re = [q_list, ['No repeat']]\n        else :\n            m = len(r_list)\n            for i in range(m - 1) :\n                if r_list[i] == r_list[-1] :\n                    the_re = [q_list, {\"Repeat starts position\": i + 2}] \n                    break\n        return the_re\n\n## test\nprint(long_div(1, 2))\nprint(long_div(1, 3))\nprint(long_div(1, 6))\nprint(long_div(1, 7))\nprint(long_div(20, 2))\nprint(long_div(20, 3))\nprint(long_div(20, 6))\nprint(long_div(20, 7))\nprint(long_div(199, 23))\n\n[[0, 5], ['No repeat']]\n[[0, 3], {'Repeat starts position': 2}]\n[[0, 1, 6], {'Repeat starts position': 3}]\n[[0, 1, 4, 2, 8, 5, 7], {'Repeat starts position': 2}]\n[[10, 0], ['No repeat']]\n[[6, 6], {'Repeat starts position': 2}]\n[[3, 3], {'Repeat starts position': 2}]\n[[2, 8, 5, 7, 1, 4, 2], {'Repeat starts position': 2}]\n[[8, 6, 5, 2, 1, 7, 3, 9, 1, 3, 0, 4, 3, 4, 7, 8, 2, 6, 0, 8, 6, 9, 5], {'Repeat starts position': 2}]",
    "crumbs": [
      "Part II Examples",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Numerical Computing and Simulation</span>"
    ]
  },
  {
    "objectID": "numerical_computing.html#frequency-of-digits-in-a-large-number",
    "href": "numerical_computing.html#frequency-of-digits-in-a-large-number",
    "title": "6  Numerical Computing and Simulation",
    "section": "6.4 Frequency of digits in a large number",
    "text": "6.4 Frequency of digits in a large number\n\nimport matplotlib.pyplot as plt\n\ndef ordered_bar_plot(a, n) :\n    nbr = a ** n\n    s = str(nbr)\n    freq = dict()\n    \n    for ch in s :\n        freq[ch] = freq.get(ch, 0) + 1\n\n    li = list()\n    for key, value in list(freq.items()) :\n        li.append((value, key))\n    li.sort(reverse = True)\n\n    total_freq = sum(freq.values())\n    \n    new_d = dict()\n    for v, k in li :\n        new_d[k] = v / total_freq\n    \n    plt.bar(new_d.keys(), new_d.values(), color='g')\n    plt.xlabel('Digit')\n    plt.ylabel('Relative frequency')\n    plt.title('Distribution of digits in %d^%d' % (a, n))\n    plt.show()\n\n# test\nordered_bar_plot(2, 10000)\n\n\n\n\n\n\n\n\n\nfrom sys import set_int_max_str_digits\nset_int_max_str_digits(7000)\nordered_bar_plot(3, 10000)\n\n\n\n\n\n\n\n\n\nordered_bar_plot(5, 10000)",
    "crumbs": [
      "Part II Examples",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Numerical Computing and Simulation</span>"
    ]
  },
  {
    "objectID": "numerical_computing.html#recursive-programming",
    "href": "numerical_computing.html#recursive-programming",
    "title": "6  Numerical Computing and Simulation",
    "section": "6.5 Recursive programming",
    "text": "6.5 Recursive programming\n\n# Example: Factorial\ndef my_factorial(n) :\n    if n == 0 :\n        return 1\n    else :\n        return n * my_factorial(n - 1)\n## test\nfor i in range(4) :\n    print(i, my_factorial(i))\nprint(10, my_factorial(10))\n\n0 1\n1 1\n2 2\n3 6\n10 3628800\n\n\n\n# Example: Tribonacci numbers --- https://oeis.org/A000073\ndef tribonacci(n) :\n    if n == 0 or n == 1 :\n        return 0\n    elif n == 2 :\n        return 1\n    else :\n        return tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3)\n\n## test\nfor i in range(6) :\n    print(i, tribonacci(i))\n        \n        \n\n0 0\n1 0\n2 1\n3 1\n4 2\n5 4",
    "crumbs": [
      "Part II Examples",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Numerical Computing and Simulation</span>"
    ]
  },
  {
    "objectID": "numerical_computing.html#simulation-of-coin-tosses",
    "href": "numerical_computing.html#simulation-of-coin-tosses",
    "title": "6  Numerical Computing and Simulation",
    "section": "6.6 Simulation of coin tosses",
    "text": "6.6 Simulation of coin tosses\n\n# Problem: Simulate N tosses of a fair coin and plot the relative frequencies\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef simu_coin_tosses(N = 10000):\n    cum_re = [0] * N # cumulative results\n    prop_re = [0] * N\n    popu = np.arange(2) # array([0, 1])\n    the_sample = np.random.choice(popu, size = N, replace = True)\n    cum_re[0] = the_sample[0]\n    prop_re[0] = cum_re[0]\n    for i in range(1, N):\n        cum_re[i] = cum_re[i - 1] + the_sample[i]\n        prop_re[i] = cum_re[i] / (i + 1)\n    start = N//3       \n    x = np.arange(start, N)       \n    plt.plot(x, prop_re[start:N])\n    epsi = 1 / np.sqrt(N)\n    plt.axhline(0.5 - epsi, color = \"red\") # lower limit line\n    plt.axhline(0.5 + epsi, color = \"red\") # upper limit line\n    plt.xlabel(\"Number of tosses\")\n    plt.ylabel(\"Relative frequency of heads\")\n    plt.title(\"Simulation of tosses of a fair coin\")\n    plt.grid(True)\n    plt.show()\n\n## test\nsimu_coin_tosses(10000)\n\n\n\n\n\n\n\n\n\nsimu_coin_tosses(10000)",
    "crumbs": [
      "Part II Examples",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Numerical Computing and Simulation</span>"
    ]
  },
  {
    "objectID": "numerical_computing.html#birthday-problem",
    "href": "numerical_computing.html#birthday-problem",
    "title": "6  Numerical Computing and Simulation",
    "section": "6.7 Birthday problem",
    "text": "6.7 Birthday problem\n\n# Problem: Find the the answer to the birthday problem (https://en.wikipedia.org/wiki/Birthday_problem) by simulation.\nimport numpy as np\n\ndef simu_birthday_problem(N = 10000, people_number = 23):\n    indicator = [0] * N\n    a = np.arange(365) # array([0, 1, ..., 364])\n    for i in range(N):\n        a_sample = np.random.choice(a, size = people_number, replace = True)\n        b = set(a_sample)\n        if len(a_sample) &gt; len(b):\n            indicator[i] = 1\n    the_result = sum(indicator) / N\n    return the_result # accuracy: +- 0.01 with 95% confidence\n\n## test\nfor i in range(5) :\n    print(simu_birthday_problem(10000, 23))\n\n0.5093\n0.5062\n0.5109\n0.5071\n0.5066",
    "crumbs": [
      "Part II Examples",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Numerical Computing and Simulation</span>"
    ]
  },
  {
    "objectID": "string_tips.html",
    "href": "string_tips.html",
    "title": "7  String Tips",
    "section": "",
    "text": "7.1 Get a string reversed\ndef rev_str(s) :\n    return s[::-1]\n\n# test\ns = 'apple'\nrev_str(s)\n\n'elppa'",
    "crumbs": [
      "Part III Tips",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>String Tips</span>"
    ]
  },
  {
    "objectID": "string_tips.html#strip-out-all-spaces",
    "href": "string_tips.html#strip-out-all-spaces",
    "title": "7  String Tips",
    "section": "7.2 Strip out all spaces",
    "text": "7.2 Strip out all spaces\n\ndef my_strip(s) :\n    return \" \".join(s.split())\n\n# test\nss = \"   This     is    a    strange    sentence.    \"\nprint(ss.lstrip())\nprint(ss.rstrip())\nprint(ss.strip())\nprint(ss.lstrip() is ss.strip())\nprint(my_strip(ss))\n\nThis     is    a    strange    sentence.    \n   This     is    a    strange    sentence.\nThis     is    a    strange    sentence.\nFalse\nThis is a strange sentence.",
    "crumbs": [
      "Part III Tips",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>String Tips</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Learning Python Notes",
    "section": "",
    "text": "Preface\nThe why, what and how questions. I wanted to learn Python. As with many things I do, I first asked myself the following questions:\n\nWhy learn Python?\nWhat should I learn?\nHow should I learn it?\n\nAmong these three, I think the easiest question to answer was the third one. My answer: by reading the books Python for Everybody and Think Python. While reading, I took notes and completed some exercises.\nAs for the why question, I had a vague answer: Python is a general-purpose language, and it’s useful.\nFor the what question, my answer was that I want to use python in the numerical computing and simulation, text mining and other areas.\nThis book has three parts:\n\nBasics\nExamples in\n\nnumerical computing and simulation\ntext mining\nother\n\nTips",
    "crumbs": [
      "Preface"
    ]
  }
]