[
  {
    "objectID": "summaryBook.html",
    "href": "summaryBook.html",
    "title": "1  Summary of Python for Everybody",
    "section": "",
    "text": "I have studied Python for Everybody: Exploring Data Using Python 3 by Charles R. Severance, and here I write down a Summary.\n\nCh 1 Introduction to Computer and computer languages\n\ncomputer: Input/output devices; CPU; main memory (RAM); secondary memory; network\nmachine language; low level language; high level language\n“The Python interpreter is written in a high-level language called ‘C’.”\n“Python scripts have names end with .py”\nImportant concepts: input and output; sequential execution, conditional execution, and repeated execution; reuse.\nThree general types of errors: syntax errors, logic errors, and semantic errors (the code runs without producting an error message, but it does not do the “right” thing.)\n\nCh 2 Variables, expressions and statements\n\nPython is case sensitive, that is, A is different from a\nVariable names can contain both letters and numbers, but they cannot start with a number\n“Variable names can start with an underscore character, but we generally avoid doing this unless we are writing library code”\n“It’s a good idea to begin variable names with a lowercase letter”\nPython reserves 33 key words, such as and, if, True, def\n“A statement is a unit of code that the Python interpreter can execute”\nexponentiation operator: **\nmodulus operator: %, e.g. 12 % 7 returns 5; quotient operator: //, e.g. 12 // 7 returns 1\n# is for commenting out\nA module is a collection of variables and functions.\n\nCh 3 Conditional execution\n # scenario 1\n if sth :\n     execution statement\n\n # scenario 2\n if sth :\n     ...\n  else :\n     ...\n\n # scenario 3\n if sth :\n     ...\n elif sth :\n     ...\n elif sth :\n     ...\n else :\n     ...\nCh 4 Functions\n def func_name(arg_1, arg_2) :\n     body of the function\nCh 5 Iterations\n # example 1\n s = '1234567890'\n for i in range(10) :\n     print(s[i])\n\n  # example 2\n  the_nbrs = [1, 2, 3, 4, 5, -1, 6, 7, 8, 9, -2, -5, 10]\n  t = 0\n  for a in the_nbrs :\n      if a &lt; 0 :\n          continue\n      t = t + a\n  print(\"The total of positive number is: \", t)\n\n  # example 3\n  a_list = list()\n  while True :\n      my_input = input(\"Enter a letter :\")\n      if my_input == 'z' :\n          break\n      a_list.append(my_input)\n  print(a_list)\nCh 6 Strings\n s_1 = 'abce'\n s_2 = `lmno`\n s_3 = s_1 + s_2\nCh 7 Files\n f_handle = open(\"file_name.text\")\n for line in f_handle :\n     line = strip(line)\n     print(line)\nCh 8 Lists\n # example 1\n my_list = ['a', 1, 2, 3, 'apple', ('thank', 'you')]\n\n # example 2: list of tuple\n a_dic = {'a': 1, 'b': 2, 'c': 3}\n my_list = list()\n for key, value in list(a_dic.items()) :\n     my_list = my_list.append((value, key))\n print(my_list)    \nCh 9 Dictionaries: one of common use of dictionary is to count number of words in a text file\n my_counter = dict()\n f_handle = open(\"a_text.text\")\n for line in f_handle :\n     line = line.rstrip()\n     words = line.split()\n     for w in words :\n         my_counter[w] = my_counter.get(w, 0) + 1\n print(my_counter)\nCh 10 Tuples\nCh 11 Regular expressions\nCh 12, 13 Network programming (mostly skipped)\nCh 14 Object oriented programming\nCh 15 Database (mostly skipped)\nCh 16 Applications (mostly skipped)",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Summary of *Python for Everybody*</span>"
    ]
  },
  {
    "objectID": "ch2.html",
    "href": "ch2.html",
    "title": "2  Variables, expressions, and statements",
    "section": "",
    "text": "A value is one of the basic things a program works with\nA variable is a name that refers to a value\nWe can use type() to check type of a value or variable\nSemantic error: the code runs without producing an error message, but it does not do the “right” thing\nVariable names can contain both letters and numbers, but they cannot start with a number\nVariable names can start with an underscore character, but we generally avoid doing this unless we are writing library code for others to use\nIt’s a good idea to begin variable names with a lowercase letter\nPython reserves 33 key words, such as and, if, True, def\nA statement is a unit of code that the Python interpreter can execute\nThe exponentiation operator in Python is **, e.g. 2**5\nThe modulus operator in Python is %, e.g. 12 % 7 (returns 5); the quotient operator is //, e.g. 12 // 7 (returns 1)\nIn Python + is a string operator; it performs concatenation, e.g. \"app\" + \"le\" (returns “apple”)\n# is used for commenting—everything from the # to the end of line is ignored; it has no effect on the program\nPython is case sensitive, that is a is different A\nA module is a collection of variables and functions.\n\n\nround(12.5)\n\n12\n\n\n\nround(0.5)\n\n0\n\n\n\nround(51.5)\n\n52\n\n\n\nround(1.5)\n\n2\n\n\n\nround(2.5)\n\n2\n\n\n\ntype(1.6)\n\nfloat\n\n\n\nx = 123.4;",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions, and statements</span>"
    ]
  },
  {
    "objectID": "ch3.html",
    "href": "ch3.html",
    "title": "3  Conditional execution",
    "section": "",
    "text": "Boolean expressions: x == y, x != y, x &gt; y, x &lt; y, x &gt;= y, x &lt;= y, x is y, x is not y\nLogical operators: and, or, not\nAny nonzero number is interpreted as True\nConditional execution: using if, else, elif — Don’t forget “:”\nUse try : and except :",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Conditional execution</span>"
    ]
  },
  {
    "objectID": "ch4.html",
    "href": "ch4.html",
    "title": "4  Functions",
    "section": "",
    "text": "A function is named sequence of statements that performs a computation.\nBuilt-in functions: type, max, min, len, int, str\nFunctions in random module: random.random(), random.randint(), random.choice()\nFunctions in math module: math.log10(), math.sin()\nfruitful function has return statement at the end; void function does not have return statement",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "ch5.html",
    "href": "ch5.html",
    "title": "5  Iteration",
    "section": "",
    "text": "Use \"while :\"; use if and break; use if and continue\nUse for and in",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Iteration</span>"
    ]
  },
  {
    "objectID": "ch6.html",
    "href": "ch6.html",
    "title": "6  Strings",
    "section": "",
    "text": "A string is a sequence of characters. We can access the characters one at a time with the bracket operator.\nTo have length, we use the function len()\nThe index of a string s ranges from 0 to len(s) - 1\nString slice: s[m:n] returns s[m], s[m+1], ..., s[n-1]. If m &gt;= n, then returns an empty string (a string with length 0). s[:n] returns s[0], ..., s[n-1]. s[m:] returns s[m], ..., s[len(s) - 1]. s[-1] returns s[len(s) - 1]\nEmpty string: a string with no character and length 0, represented by two quotation marks. Example: s = \"\". In this case, we cannot do s[0]\nStrings are immutable, that is, s = \"apple\", you cannot do s[0] = b.\n\"a\" in \"apple\" returns True, that is, in is a boolean operator that takes two strings and return True if the first appears as a sub-string in the second.\nThe comparison operators (e.g ‘==’, ‘&gt;’ and ‘&lt;=’) work on strings.\nString methods: dir(a_string) lists the methods; we use help(str.upper) to get help on a method (e.g. upper) for string.\nExample: s = 'apple', new_string = s.upper() Now new_string is ‘APPLE’.\nExample: line = \"  here we go  \", line.strip() gives “here we go”\nFormat operator: When applied to integers, % is the modulus operator. But when the first operand is a string, % is the format operator.\nExample: monkey = 40; \"%d\" % monkey gives string \"42\"\nExample: \"In %d years I have spotted %g %s\" % (3, 2.5, 'houses!') gives a string: “In 3 years I have spotted 2.5 houses!”\n\n\n# Empty string\ns = \"\"\nprint(s[0])\n\n\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[1], line 3\n      1 # Empty string\n      2 s = \"\"\n----&gt; 3 print(s[0])\n\nIndexError: string index out of range",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "ch7.html",
    "href": "ch7.html",
    "title": "7  Files",
    "section": "",
    "text": "Open a file: f_handle = open(\"file_name\")\n\\n is a character\nReading files line by line:\n f_handle = open(\"file_name\")\n count = 0\n for line in f_handle :\n     count = count + 1\n  print('Line count:', count)\nIf you know the file is relatively small compared with the size of main memory, then you can read the whole file into one string using the method read:\n f_handle = open(\"file_name\")\n a_string = f_handle.read()\n print(len(a_string))\nSearching trough a file:\n f_handle = open(\"file_name\")\n for line in f_handle :\n     if line.startswith('From:') :\n         line = line.rstrip() # to strip '\\n' and white space from the right\n         print(line)    \nUsing try and except\n f_name = input(\"Enter the file name: \")\n try :\n     f_handle = open(f_name)\n  except :\n     message = \"%s cannot be opened!\" % f_name\n     print(message)\nWriting files:\n f_handle = open(\"output.txt\", 'w')\n line_1 = \"This is a line for testing.\\n\"\n f_handle.write(line_1)\n line_2 = \"The second line for testing.\\n\"\n f_handle.write(line_2)\n f_handle.close\nIMPORTANT: If the file already exists, opening it in write mode clears out the old data and starts fresh, so be careful! If the file does not exist, a new one is created.\n\n\n!pip install urllib2\n\nDefaulting to user installation because normal site-packages is not writeable\nLooking in indexes: https://prtprdppm01.stats.govt.nz/all-pypi/latest/simple\nERROR: Could not find a version that satisfies the requirement urllib2 (from versions: none)\nERROR: No matching distribution found for urllib2",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Files</span>"
    ]
  },
  {
    "objectID": "ch8.html",
    "href": "ch8.html",
    "title": "8  Lists",
    "section": "",
    "text": "a list is a sequence of values\n my_list = [1, 2, 3, 'apple', 'banana', ['hello', 'world']]\n empty_list = []\nIn a string, the values are characters; in a list, they can be any type.\nUnlike strings, lists are mutable because you can change the order of items in a list or reassign an item in a list.\nrange(n) returns a list of indices from 0 to n\nList operations\n a = [1, 2, 3]\n b = [4, 5]\n c = a + b # returns [1, 2, 3, 4, 5]\n d = b * 2 # returns [4, 5, 4, 5]\na_list.sort() arranges the elements of the list from low to high (NB: a_list has been modified)\nnew_list = sorted(a_list) returns a new list, where the elements are the same in a_list but in order from low to high\nDeleting elements python       a_list = ['a', 'b', 'c', 'd', 'e', 'f']       del a_list[1:5] # now a_list becomes ['a', 'f'] --- note the slice operator [1:5]\nA string is a sequence of characters and a list is a sequence of values, but a list of characters is not the same as a string. To convert from a string to a list of character, we can do list(a_string)\nThe list function breaks a string into individual letters. If we want to break a string into words, we use split method\nIt is important to distinguish between operations that modify lists and operations that create new lists. For example, append method modifies a list, but the + operator creates a new list.\nIf we want to use a method like sort that modifies the argument, but we need to keep the original list as well, we can make a copy:\n orig = t[:]\n t.sort()\nWhen we are programming, we must always be thinking, “What might go wrong?”\n\n\nrange(8)\n\nrange(0, 8)\n\n\n\ntype(range(8))\n\nrange",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "ch9.html",
    "href": "ch9.html",
    "title": "9  Dictionaries",
    "section": "",
    "text": "In a dictionary, the indices can be (almost) any type. In a list, the indices must be integers (starting from 0).\nDictiary: key-value pairs\nExample:\n empty_dic = dict()\n\n eng2spanish = {'one': 'uno', 'two': 'dos', 'three': 'tres'}\n pirnt(eng2spanish.keys()) # keys\n print(eng2spanish.values()) # values\nThe order of items in a dictionary is unpredictable.\nThe len works on dictionaries.\nThe in works on dictionaries; it tells you whether something appears as a key in the dictionary\nlist(a_dict.values()) returns a list, that contains dic_values in it\nusing a_dic.get(a_key_value, a_default_value) : if the a_key_value appears in the dictionary then return the corresponding value; otherwise it the returns the default value\nOne of the common uses of a dictionary is to count the occurrence of words in a text file.\nline.translate(line.maketrans(fromstr, tostr, deletestr))\n line = line.translate(line.maketrans('', '', string.punctuation)) # remove punctuation\n line = line.lower() # lower case\n words = line.split() # words\n\n\neng2spanish = {'one': 'uno', 'two': 'dos', 'three': 'tres'}\neng2spanish.get('one', 'tres')\n\n'uno'",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Dictionaries</span>"
    ]
  },
  {
    "objectID": "ch10.html",
    "href": "ch10.html",
    "title": "10  Tuples",
    "section": "",
    "text": "A tuple: t = (1, 23, 'a', 'b').\nTuples are immutable; tuples are comparable and hashable so we can sort lists of them and use tuples as key values in Python dictionaries.\nA tuple with a singl element: t = ('a', ) — there must be a comma!\nswap values in two variables:\n a = 5\n b = 8\n print(a, b)\n (a, b) = (b, a)\n print(a, b)\nlist(a_dic.items()) returns a list of tuples, where the elements are the key-value pairs. python      a_dic = {'c': 10, 'a': 20, 'b': 30}      L = list(a_dic.items())      print(L)      L.sort()      print(L)\nusing two variables in for loop\n d = {'a': 10, 'b': 20, 'c': 0}\n L = list()\n for key, val in d.items() :\n     L.append(val, key)\n  L.sort(reverse = True)\nusing tuples as keys in dictionaries\n directory = dict()\n directory[last_name, first_name] = tel_nbr\n\n for last, first in directory :\n     print(first, last, dirctory[last, first])\nIf we are passing a sequence as an argument to a function, using tuples reduces the potential for unexpected behavior due to aliasing.\nlist []; dictionary {}; tuple ()\nAn example:\n d = {'a': 1, 'b': 2, 'c': 3}\n list(d.keys()) # a list of characters, ['a', 'b', 'c']\n list(d.values()) # a list of numbers, [1, 2, 3]\n list(d.items()) # a list of tuples [('a', 1), ('b', 2), ('c', 3)]\n\n\n# from ChatGpt: only keep English letters\ns = list(\"that{\\em everyone}, Interestingly, the\")\nfiltered_s = list(filter(lambda char: char.isalpha(), s))\nprint(filtered_s)\n\n['t', 'h', 'a', 't', 'e', 'm', 'e', 'v', 'e', 'r', 'y', 'o', 'n', 'e', 'I', 'n', 't', 'e', 'r', 'e', 's', 't', 'i', 'n', 'g', 'l', 'y', 't', 'h', 'e']\n\n\n&lt;&gt;:2: SyntaxWarning: invalid escape sequence '\\e'\n&lt;&gt;:2: SyntaxWarning: invalid escape sequence '\\e'\n/tmp/ipykernel_1267285/1062503463.py:2: SyntaxWarning: invalid escape sequence '\\e'\n  s = list(\"that{\\em everyone}, Interestingly, the\")",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Tuples</span>"
    ]
  },
  {
    "objectID": "ch11.html",
    "href": "ch11.html",
    "title": "11  Regular expressions",
    "section": "",
    "text": "Using library/module re\n import re\n s = 'ioewr987hjfowijrw;ofisopyuh3we'\n if re.search('[0-9]', s) :\n     print(\"a number found\")\n\n re.findall(\"([0-9]+)\", s) # return a list\nRegular expression table:\n\n\n\n\n\n\n\n\nRegular Expression\nDescription\n\n\n\n\n.\nMatches any character except a newline\n\n\n^\nMatches the start of a string\n\n\n$\nMatches the end of a string\n\n\n\\d\nMatches any digit (0-9)\n\n\n\\D\nMatches any non-digit character\n\n\n\\w\nMatches any word character (letters, digits, underscore)\n\n\n\\W\nMatches any non-word character\n\n\n\\s\nMatches any whitespace (space, tab, newline)\n\n\n\\S\nMatches any non-whitespace character\n\n\n\\b\nMatches a word boundary\n\n\n\\B\nMatches a non-word boundary\n\n\n[abc]\nMatches any character inside the brackets (a, b, or c)\n\n\n[^abc]\nMatches any character not inside the brackets\n\n\n[a-z]\nMatches any lowercase letter from a to z\n\n\n[A-Z]\nMatches any uppercase letter from A to Z\n\n\n[0-9]\nMatches any digit from 0 to 9\n\n\na|b\nMatches either ‘a’ or ‘b’\n\n\n()\nGroups expressions together for capturing\n\n\n(?:...)\nGroups expressions together without capturing\n\n\na*\nMatches ‘a’ zero or more times\n\n\na+\nMatches ‘a’ one or more times\n\n\na?\nMatches ‘a’ zero or one time\n\n\na{3}\nMatches exactly 3 occurrences of ‘a’\n\n\na{3,}\nMatches 3 or more occurrences of ‘a’\n\n\na{3,5}\nMatches between 3 and 5 occurrences of ‘a’\n\n\n(?=...)\nPositive lookahead (ensures match is followed by …)\n\n\n(?!...)\nNegative lookahead (ensures match is not followed by …)\n\n\n(?&lt;=...)\nPositive lookbehind (ensures match is preceded by …)\n\n\n(?&lt;!...)\nNegative lookbehind (ensures match is not preceded by …)",
    "crumbs": [
      "Part I Basics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Regular expressions</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Learning Python Notes",
    "section": "",
    "text": "Preface\nThe why, what and how questions. I wanted to learn Python. As with many things I do, I first asked myself the following questions:\n\nWhy learn Python?\nWhat should I learn?\nHow should I learn it?\n\nAmong these three, I think the easiest question to answer was the third one. My answer: by reading the books Python for Everybody and Think Python. While reading, I took notes and completed some exercises.\nAs for the why question, I had a vague answer: Python is a general-purpose language, and it’s useful.\nFor the what question, my answer was that I want to use python in the numerical computing, text mining and other areas.\nThis book has three parts:\n\nBasics\nExamples in\n\nnumerical computing\ntext mining\nother\n\nTips",
    "crumbs": [
      "Preface"
    ]
  }
]